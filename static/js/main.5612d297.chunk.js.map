{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","accounts","contract1","contract2","componentWillMount","eth","getAccounts","instance1","Contract","Staking","abi","instance2","ChainlinkETHprice","setState","runInit","alert","error","methods","getETHTVL","call","ETHTVL","getVaultBalance","ContractBalance","getStakedBalance","balance","getPositiveIndex","index","getNbUsers","NbUsers","getLatestPrice","price","DEPOSIT","contract","DamountWei","utils","toWei","Damount","value","deposit","send","from","WITHDRAW","WamountWei","Wamount","withdrawal","this","className","style","display","justifyContent","Card","width","Header","Body","Form","Group","controlId","Control","type","id","ref","input","Button","onClick","variant","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5612d297.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Card from 'react-bootstrap/Card';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Table from 'react-bootstrap/Table';\nimport Staking from \"./contracts/Staking.json\";\nimport ChainlinkETHprice from \"./contracts/ChainlinkETHprice.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\"; \n\n\nclass App extends Component {\n  state = { web3: null, accounts: null, contract1: null, contract2: null }; \n\n  componentWillMount = async () => {\n    try {\n      // Récupérer le provider web3\n      const web3 = await getWeb3();\n  \n      // Utiliser web3 pour récupérer les comptes de l’utilisateur (MetaMask dans notre cas) \n      const accounts = await web3.eth.getAccounts();\n\n      // Récupérer l’instance du smart contract “Staking” avec web3 et les informations du déploiement du fichier (client/src/contracts/Staking.json)\n  \n      const instance1 = new web3.eth.Contract(\n        Staking.abi,\n        \"0x76FD2399fF36dD742E8748D1d98947E7b3B605b2\", \n      );\n        const instance2 = new web3.eth.Contract(\n        ChainlinkETHprice.abi,\n        \"0x57EF9887279a27F1a895918defC2a0443113ff93\", \n      );\n \n      this.setState({ web3, accounts, contract1: instance1, contract2: instance2 }, this.runInit);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Non-Ethereum browser detected. Can you please try to install MetaMask before starting.`,\n      );\n      console.error(error);\n    }\n  };\n\n  runInit = async() => {\n    const { accounts, contract1, contract2 } = this.state;\n  \n    // récupérer la TVL\n    const ETHTVL = await contract1.methods.getETHTVL().call();\n    const TVL = ETHTVL/1000000000000000000;\n\n    // récupérer le nombre d'ETH sur le contrat\n    const ContractBalance = await contract1.methods.getVaultBalance().call(); \n\n    // récupérer le montant déposé\n    const balance = await contract1.methods.getStakedBalance(accounts[0]).call();\n \n    // récupérer le numéro de déposant\n    const index = await contract1.methods.getPositiveIndex(accounts[0]).call();\n \n    // récupérer le nombre d'utilisateurs\n    const NbUsers = await contract1.methods.getNbUsers().call();\n\n    // récupérer le prix de l'ETH avec Chainlink\n    const price = await contract2.methods.getLatestPrice().call();\n \n\n    // Mettre à jour le state \n   this.setState({ETHTVL:ETHTVL, ContractBalance:ContractBalance, balance:balance, index:index, NbUsers:NbUsers, price:price });\n  }; \n\n\n\n  DEPOSIT = async() => {\n    const { accounts, contract, web3 } = this.state;\n    const DamountWei = web3.utils.toWei(this.Damount.value, 'ether');   \n  await contract.methods.deposit().send({from: accounts[0], value: DamountWei});\n  this.runInit();\n}\n  \n  WITHDRAW = async() => {\n    const { accounts, contract, web3 } = this.state;\n    const WamountWei = web3.utils.toWei(this.Wamount.value, 'ether');  \n    await contract.methods.withdrawal(WamountWei).send({from: accounts[0]});\n    this.runInit();\n  }\n \n  //CLAIM = async() => {\n  //  const { accounts, contract } = this.state;\n  //  const propo = this.propo.value;\n  //  await contract.methods.RegisterProposal(propo).send({from: accounts[0]});\n  //  this.runInit();\n  //}\n\n\n  render() {\n    const { ETHTVL, ContractBalance, balance, index, NbUsers, price} = this.state;\n   \n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n\n    return (\n      <div className=\"App\">\n        <div>\n            <h2 className=\"text-center\">ETH Vault</h2>\n            <hr></hr>\n            <br></br>\n        </div>\n        <div style={{display: 'flex', justifyContent: 'center'}}>\n          <Card style={{ width: '50rem' }}>\n            <Card.Header><strong> ETH price : {price} $ </strong></Card.Header>\n            <Card.Header><strong>TVL : {ETHTVL/1000000000000000000} ETH </strong></Card.Header>\n            <Card.Header><strong>Contract Balance: {ContractBalance/1000000000000000000} </strong></Card.Header>\n            <Card.Header><strong>Number of active users: {NbUsers}  </strong></Card.Header>\n            <Card.Header><strong>Your staked balance: {balance/1000000000000000000}  </strong></Card.Header>\n            <Card.Header><strong>Your index: {index} </strong></Card.Header>\n          </Card>\n        </div>\n        <br></br>\n        <div style={{display: 'flex', justifyContent: 'center'}}>\n          <Card style={{ width: '50rem' }}>\n            <Card.Header><strong> I want to deposit: </strong></Card.Header>\n            <Card.Body>   \n                <Form.Group controlId=\"formAddress\">\n                <Form.Control type=\"text\" id=\"Damount\"\n                ref={(input) => { this.Damount = input }}\n                />\n                </Form.Group>    \n              <Button onClick={ this.DEPOSIT } variant=\"dark\" > DEPOSIT </Button>\n            </Card.Body>\n          </Card>\n          </div>\n          <div style={{display: 'flex', justifyContent: 'center'}}>\n          <Card style={{ width: '50rem' }}>\n            <Card.Header><strong> I want to withdraw: </strong></Card.Header>\n            <Card.Body>\n                <Form.Group controlId=\"formAddress\">\n                <Form.Control type=\"text\" id=\"Wamount\"\n                ref={(input) => { this.Wamount = input }}\n                />\n                </Form.Group>\n            <Button onClick={ this.WITHDRAW } variant=\"dark\" > WITHDRAW </Button>     \n            </Card.Body>\n          </Card>\n          </div>\n        <br></br>\n      </div>\n    );\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}